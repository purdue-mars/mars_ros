#! /usr/bin/env python3

from copy import deepcopy

import numpy as np
import rospy
from geometry_msgs.msg import Point, Pose, PoseStamped, Quaternion

import ros_numpy
from mars_behavior.arm import ArmInterface
from mars_behavior.tf import TFInterface
from mars_behavior.gripper import WSGInterface
from mars_behavior.perception import PerceptionInterface
from mars_behavior.pose_utils import (
    AXIS_X,
    AXIS_Y,
    AXIS_Z,
    rot_from_a_to_b,
    rot_from_a_to_b_preserve_axis,
    tf_mat_to_quat_stamped,
    vec_to_hom_mat,
)


class CableInsertionNode:
    GRASP_HEIGHT_OFFSET_ = 0.2

    def __init__(self):
        self.pan_pan_gripper: WSGInterface = WSGInterface("pan_pan")
        self.an_an_gripper: WSGInterface = WSGInterface("an_an")
        self.arm_: ArmInterface = ArmInterface()
        self.perception_ = PerceptionInterface()
        self.debug_goal = rospy.Publisher(
            "test_cable_eef_pose", PoseStamped, queue_size=1
        )

    def reset(self):
        self.arm_.go_to()

    def cable_pick(self, robot_id):
        # Get pose of object
        robot: TFInterface = self.arm_.get_arm_tf(robot_id)

        rospy.loginfo("Starting cable pick")
        self.perception_.run_object_registration("cable_male")

        grasp_pose_on_obj = ros_numpy.msgify(Pose, vec_to_hom_mat([0, 0, 0.03]))
        cable_male_grasp_pose = robot.pose_from_object(
            "cable_male", grasp_pose_on_obj
        ).pose

        hover_pose: PoseStamped = PoseStamped()
        hover_pose.header.frame_id = robot.grasp_frame
        hover_pose.pose = deepcopy(cable_male_grasp_pose)

        grasp_pose = PoseStamped(header=hover_pose.header)
        grasp_pose.pose = deepcopy(cable_male_grasp_pose)
        z_axis_cable_in_hand = robot.transform_vector(
            AXIS_Z, "cable_male", robot.grasp_frame
        )

        tf_mat = rot_from_a_to_b_preserve_axis(AXIS_X, z_axis_cable_in_hand, AXIS_Z)

        grasp_pose.pose.orientation = tf_mat_to_quat_stamped(
            tf_mat, robot.grasp_frame
        ).quaternion
        hover_pose.pose.orientation = tf_mat_to_quat_stamped(
            tf_mat, robot.grasp_frame
        ).quaternion

        hover_pose = robot.to_base(hover_pose)
        grasp_pose = robot.to_base(grasp_pose)
        hover_pose.pose.position.z += self.GRASP_HEIGHT_OFFSET_

        self.debug_goal.publish(grasp_pose)

        self.arm_.add_goal(hover_pose, robot_id)
        self.arm_.add_goal(grasp_pose, robot_id)
        assert self.arm_.execute_planned_goals(robot_id)

        self.pan_pan_gripper.grasp()

        self.arm_.add_goal(hover_pose, robot_id)
        assert self.arm_.execute_planned_goals(robot_id)

    def cable_handover(self, from_robot_id, to_robot_id):
        from_robot: TFInterface = self.arm_.get_arm_tf(from_robot_id)
        to_robot: TFInterface = self.arm_.get_arm_tf(to_robot_id)

        # define specified handoff pose
        handoff_pose_pan_pan: PoseStamped = PoseStamped()
        handoff_pose_pan_pan.header.frame_id = from_robot.grasp_frame
        handoff_pose_pan_pan.pose.position = ros_numpy.msgify(
            Point, np.array([0, 0, 0])
        )

        peg_ori = from_robot.transform_vector(
            AXIS_Y, from_robot.base_frame, from_robot.grasp_frame
        )
        tf_mat = rot_from_a_to_b_preserve_axis(AXIS_X, peg_ori, AXIS_Z)
        handoff_pose_pan_pan.pose.orientation = tf_mat_to_quat_stamped(
            tf_mat, from_robot.grasp_frame
        ).quaternion
        handoff_pose_pan_pan = from_robot.to_base(handoff_pose_pan_pan)
        handoff_pose_pan_pan.pose.position = ros_numpy.msgify(
            Point, np.array([0.404, 0.396, 0.454])
        )

        self.arm_.add_goal(handoff_pose_pan_pan, from_robot_id)
        assert self.arm_.execute_planned_goals(from_robot_id)

        grasp_pose_on_obj = ros_numpy.msgify(Pose, vec_to_hom_mat([0.043, 0, 0]))
        handoff_pose_an_an = to_robot.pose_from_object(
            from_robot.grasp_frame, grasp_pose_on_obj
        )
        peg_ori = to_robot.transform_vector(
            AXIS_X, from_robot.base_frame, to_robot.grasp_frame
        )
        tf_mat = rot_from_a_to_b(AXIS_Z, peg_ori)
        handoff_pose_an_an.pose.orientation = tf_mat_to_quat_stamped(
            tf_mat, to_robot.grasp_frame
        ).quaternion

        self.arm_.add_goal(to_robot.to_base(handoff_pose_an_an), to_robot_id)
        self.arm_.execute_planned_goals(to_robot_id)

        self.an_an_gripper.grasp()
        self.pan_pan_gripper.home()

        tf_mat = rot_from_a_to_b_preserve_axis(AXIS_Z, AXIS_X,AXIS_Y)
        handoff_pose_pan_pan.pose.position = ros_numpy.msgify(
            Point, np.array([0, 0, 0])
        )
        handoff_pose_pan_pan.pose.orientation = tf_mat_to_quat_stamped(
            tf_mat, from_robot.grasp_frame
        ).quaternion

        handoff_pose_pan_pan = from_robot.to_base(handoff_pose_pan_pan)
        self.debug_goal.publish(handoff_pose_pan_pan)
        self.arm_.add_goal(handoff_pose_pan_pan, from_robot_id)
        assert self.arm_.execute_planned_goals(from_robot_id)

        self.pan_pan_gripper.grasp()
        self.an_an_gripper.home()

        retreat_pose_an_an = PoseStamped()
        retreat_pose_an_an.header.frame_id = to_robot.grasp_frame
        retreat_pose_an_an.pose.position.z -= 0.10
        self.arm_.add_goal(to_robot.to_base(retreat_pose_an_an), to_robot_id)
        assert self.arm_.execute_planned_goals(to_robot_id)

    def cable_insert_homing(self, robot_id):
        robot: TFInterface = self.arm_.get_arm_tf(robot_id)
        insertion.reset()
        self.perception_.run_object_registration("cable_female")
        cable_female_grasp_pose = robot.pose_from_object("cable_female").pose

        hover_pose = PoseStamped()
        hover_pose.header.frame_id = robot.grasp_frame
        hover_pose.pose = deepcopy(cable_female_grasp_pose)
        hover_pose.pose.orientation = ros_numpy.msgify(
            Quaternion, np.array([0, 0, 0, 1])
        )
        hover_pose = robot.to_base(hover_pose)
        hover_pose.pose.position.z += 0.05
        self.arm_.add_goal(hover_pose, robot_id)
        assert self.arm_.execute_planned_goals(robot_id)


def wait_until_killed():
    r = rospy.Rate(10)
    while not rospy.is_shutdown():
        r.sleep()


if __name__ == "__main__":
    rospy.init_node("cable_insertion_node")
    insertion = CableInsertionNode()
    rospy.sleep(rospy.Duration(2.0))
    insertion.reset()
    insertion.pan_pan_gripper.home()
    insertion.an_an_gripper.home()
    #insertion.cable_pick("pan_pan")
    insertion.cable_handover("pan_pan", "an_an")
    insertion.cable_insert_homing("pan_pan")
    insertion.pan_pan_gripper.grasp()
    insertion.arm_.run_task("insert", callback=wait_until_killed)
    rospy.spin()
